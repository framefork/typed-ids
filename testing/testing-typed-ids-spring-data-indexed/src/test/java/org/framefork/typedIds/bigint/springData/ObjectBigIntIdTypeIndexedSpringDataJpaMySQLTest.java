package org.framefork.typedIds.bigint.springData;

import jakarta.persistence.EntityManager;
import jakarta.persistence.Tuple;
import org.framefork.typedIds.bigint.hibernate.basic.BigIntAppGeneratedExplicitMappingEntity;
import org.framefork.typedIds.bigint.hibernate.basic.BigIntDbAutoGeneratedExplicitMappingEntity;
import org.framefork.typedIds.bigint.hibernate.basic.BigIntDbIdentityGeneratedExplicitMappingEntity;
import org.framefork.typedIds.bigint.hibernate.basic.BigIntDbSequenceGeneratedExplicitMappingEntity;
import org.framefork.typedIds.springData.AbstractSpringDataMySQLTest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import static org.assertj.core.api.Assertions.assertThat;

@Transactional
class ObjectBigIntIdTypeIndexedSpringDataJpaMySQLTest extends AbstractSpringDataMySQLTest
{

    @Autowired
    private EntityManager entityManager;

    @Autowired
    private BigIntAppGeneratedExplicitMappingEntityRepository appGeneratedRepository;

    @Autowired
    private BigIntDbAutoGeneratedExplicitMappingEntityRepository dbAutoGeneratedRepository;

    @Autowired
    private BigIntDbIdentityGeneratedExplicitMappingEntityRepository dbIdentityGeneratedRepository;

    @Autowired
    private BigIntDbSequenceGeneratedExplicitMappingEntityRepository dbSequenceGeneratedRepository;

    @Test
    public void testSchema()
    {
        var table1 = getIdColumnInfo(entityManager, BigIntAppGeneratedExplicitMappingEntity.TABLE_NAME);
        assertThat(table1.get("data_type", String.class)).isEqualToIgnoringCase("bigint");
        assertThat(table1.get("column_type", String.class)).isEqualToIgnoringCase("bigint");

        var table2 = getIdColumnInfo(entityManager, BigIntDbAutoGeneratedExplicitMappingEntity.TABLE_NAME);
        assertThat(table2.get("data_type", String.class)).isEqualToIgnoringCase("bigint");
        assertThat(table2.get("column_type", String.class)).isEqualToIgnoringCase("bigint");

        var table3 = getIdColumnInfo(entityManager, BigIntDbIdentityGeneratedExplicitMappingEntity.TABLE_NAME);
        assertThat(table3.get("data_type", String.class)).isEqualToIgnoringCase("bigint");
        assertThat(table3.get("column_type", String.class)).isEqualToIgnoringCase("bigint");

        var table4 = getIdColumnInfo(entityManager, BigIntDbSequenceGeneratedExplicitMappingEntity.TABLE_NAME);
        assertThat(table4.get("data_type", String.class)).isEqualToIgnoringCase("bigint");
        assertThat(table4.get("column_type", String.class)).isEqualToIgnoringCase("bigint");
    }

    private static Tuple getIdColumnInfo(final EntityManager em, final String tableName)
    {
        return (Tuple) em.createNativeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = :table_name AND column_name = :column_name", Tuple.class)
            .setParameter("table_name", tableName)
            .setParameter("column_name", "id")
            .getSingleResult();
    }

    @Test
    public void testUsageAppGenerated()
    {
        Map<String, BigIntAppGeneratedExplicitMappingEntity.Id> idsByTitle = new HashMap<>();

        var articles = List.of(
            new BigIntAppGeneratedExplicitMappingEntity("one"),
            new BigIntAppGeneratedExplicitMappingEntity("two"),
            new BigIntAppGeneratedExplicitMappingEntity("three")
        );

        appGeneratedRepository.saveAll(articles);
        flushAndClear();

        articles.forEach(article -> idsByTitle.put(article.getTitle(), article.getId()));

        var idOfTwo = Objects.requireNonNull(idsByTitle.get("two"), "id must not be null");

        var article = appGeneratedRepository.findById(idOfTwo).orElseThrow();
        Assertions.assertEquals("two", article.getTitle());

        var articleByTitle = appGeneratedRepository.findByTitle("two");
        Assertions.assertEquals(idOfTwo, articleByTitle.getId());

        var allArticles = appGeneratedRepository.findAllById(idsByTitle.values());
        Assertions.assertEquals(3, allArticles.size());
    }

    @Test
    public void testUsageDbAutoGenerated()
    {
        Map<String, BigIntDbAutoGeneratedExplicitMappingEntity.Id> idsByTitle = new HashMap<>();

        var articles = List.of(
            new BigIntDbAutoGeneratedExplicitMappingEntity("one"),
            new BigIntDbAutoGeneratedExplicitMappingEntity("two"),
            new BigIntDbAutoGeneratedExplicitMappingEntity("three")
        );

        articles.forEach(article -> Assertions.assertNull(article.getId()));

        dbAutoGeneratedRepository.saveAll(articles);
        flushAndClear();

        articles.forEach(article -> Assertions.assertNotNull(article.getId()));

        articles.forEach(article -> idsByTitle.put(article.getTitle(), article.getId()));

        var idOfTwo = Objects.requireNonNull(idsByTitle.get("two"), "id must not be null");

        var article = dbAutoGeneratedRepository.findById(idOfTwo).orElseThrow();
        Assertions.assertEquals("two", article.getTitle());

        var articleByTitle = dbAutoGeneratedRepository.findByTitle("two");
        Assertions.assertEquals(idOfTwo, articleByTitle.getId());

        var allArticles = dbAutoGeneratedRepository.findAllById(idsByTitle.values());
        Assertions.assertEquals(3, allArticles.size());
    }

    @Test
    public void testUsageDbIdentityGenerated()
    {
        Map<String, BigIntDbIdentityGeneratedExplicitMappingEntity.Id> idsByTitle = new HashMap<>();

        var articles = List.of(
            new BigIntDbIdentityGeneratedExplicitMappingEntity("one"),
            new BigIntDbIdentityGeneratedExplicitMappingEntity("two"),
            new BigIntDbIdentityGeneratedExplicitMappingEntity("three")
        );

        articles.forEach(article -> Assertions.assertNull(article.getId()));

        dbIdentityGeneratedRepository.saveAll(articles);
        flushAndClear();

        articles.forEach(article -> Assertions.assertNotNull(article.getId()));

        articles.forEach(article -> idsByTitle.put(article.getTitle(), article.getId()));

        var idOfTwo = Objects.requireNonNull(idsByTitle.get("two"), "id must not be null");

        var article = dbIdentityGeneratedRepository.findById(idOfTwo).orElseThrow();
        Assertions.assertEquals("two", article.getTitle());

        var articleByTitle = dbIdentityGeneratedRepository.findByTitle("two");
        Assertions.assertEquals(idOfTwo, articleByTitle.getId());

        var allArticles = dbIdentityGeneratedRepository.findAllById(idsByTitle.values());
        Assertions.assertEquals(3, allArticles.size());
    }

    @Test
    public void testUsageDbSequenceGenerated()
    {
        Map<String, BigIntDbSequenceGeneratedExplicitMappingEntity.Id> idsByTitle = new HashMap<>();

        var articles = List.of(
            new BigIntDbSequenceGeneratedExplicitMappingEntity("one"),
            new BigIntDbSequenceGeneratedExplicitMappingEntity("two"),
            new BigIntDbSequenceGeneratedExplicitMappingEntity("three")
        );

        articles.forEach(article -> Assertions.assertNull(article.getId()));

        dbSequenceGeneratedRepository.saveAll(articles);
        flushAndClear();

        articles.forEach(article -> Assertions.assertNotNull(article.getId()));

        articles.forEach(article -> idsByTitle.put(article.getTitle(), article.getId()));

        var idOfTwo = Objects.requireNonNull(idsByTitle.get("two"), "id must not be null");

        var article = dbSequenceGeneratedRepository.findById(idOfTwo).orElseThrow();
        Assertions.assertEquals("two", article.getTitle());

        var articleByTitle = dbSequenceGeneratedRepository.findByTitle("two");
        Assertions.assertEquals(idOfTwo, articleByTitle.getId());

        var allArticles = dbSequenceGeneratedRepository.findAllById(idsByTitle.values());
        Assertions.assertEquals(3, allArticles.size());
    }

}
